import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';

var simpleIsEqual = function simpleIsEqual(a, b) {
  return a === b;
};

function index (resultFn) {
  var isEqual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : simpleIsEqual;

  var lastThis = void 0;
  var lastArgs = [];
  var lastResult = void 0;
  var calledOnce = false;

  var isNewArgEqualToLast = function isNewArgEqualToLast(newArg, index) {
    return isEqual(newArg, lastArgs[index]);
  };

  var result = function result() {
    for (var _len = arguments.length, newArgs = Array(_len), _key = 0; _key < _len; _key++) {
      newArgs[_key] = arguments[_key];
    }

    if (calledOnce && lastThis === this && newArgs.length === lastArgs.length && newArgs.every(isNewArgEqualToLast)) {
      return lastResult;
    }

    calledOnce = true;
    lastThis = this;
    lastArgs = newArgs;
    lastResult = resultFn.apply(this, newArgs);
    return lastResult;
  };

  return result;
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var _class, _temp;

var FullpageSection = (_temp = _class = function (_PureComponent) {
  inherits(FullpageSection, _PureComponent);

  function FullpageSection(props) {
    classCallCheck(this, FullpageSection);

    var _this = possibleConstructorReturn(this, (FullpageSection.__proto__ || Object.getPrototypeOf(FullpageSection)).call(this, props));

    _this.ref = React.createRef();
    _this.state = {};
    _this.sectionDidShow = _this.sectionDidShow.bind(_this);
    _this.sectionDidHide = _this.sectionDidHide.bind(_this);
    return _this;
  }

  createClass(FullpageSection, [{
    key: 'sectionDidShow',
    value: function () {
      function sectionDidShow() {
        var onShow = this.props.onShow;

        onShow();
      }

      return sectionDidShow;
    }()
  }, {
    key: 'sectionDidHide',
    value: function () {
      function sectionDidHide() {
        var onHide = this.props.onHide;

        onHide();
      }

      return sectionDidHide;
    }()
  }, {
    key: 'render',
    value: function () {
      function render() {
        var _props = this.props,
            children = _props.children,
            height = _props.height,
            style = _props.style,
            className = _props.className;


        return React.createElement(
          'section',
          { className: className, style: _extends({ height: height }, style), ref: this.ref },
          children
        );
      }

      return render;
    }()
  }]);
  return FullpageSection;
}(PureComponent), _class.propTypes = {
  children: PropTypes.node.isRequired,
  height: PropTypes.string,
  style: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool])),
  className: PropTypes.string,
  onShow: PropTypes.func,
  onHide: PropTypes.func
}, _class.defaultProps = {
  height: '100vh',
  style: {},
  className: '',
  onShow: null,
  onHide: null
}, _temp);

/**
 * @class FullpageNavigation
 */

var FullpageNavigation = function (_PureComponent) {
  inherits(FullpageNavigation, _PureComponent);

  function FullpageNavigation() {
    classCallCheck(this, FullpageNavigation);
    return possibleConstructorReturn(this, (FullpageNavigation.__proto__ || Object.getPrototypeOf(FullpageNavigation)).apply(this, arguments));
  }

  createClass(FullpageNavigation, [{
    key: 'render',
    value: function () {
      function render() {
        return React.createElement(
          'div',
          null,
          React.createElement(
            'li',
            null,
            '1,2,3'
          )
        );
      }

      return render;
    }()
  }]);
  return FullpageNavigation;
}(PureComponent);

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "/* add css styles here (optional) */\n\n.styles_fullpage__58Y4V {\n  \n}\n";
var styles = { "fullpage": "styles_fullpage__58Y4V" };
styleInject(css);

var _class$1, _temp$1, _initialiseProps;

var Fullpage = (_temp$1 = _class$1 = function (_PureComponent) {
  inherits(Fullpage, _PureComponent);

  function Fullpage(props) {
    classCallCheck(this, Fullpage);

    var _this = possibleConstructorReturn(this, (Fullpage.__proto__ || Object.getPrototypeOf(Fullpage)).call(this, props));

    _initialiseProps.call(_this);

    _this.driver = React.createRef();
    _this.warperRef = React.createRef();
    _this.fullpageRef = React.createRef();
    _this.scrollTicking = false;
    _this.resizeTicking = false;
    _this.historyTimeout = null;
    _this.children = null;
    _this.slides = null;
    _this.state = {
      translateY: 0,
      currentSlide: null
    };
    _this.lastKnownScrollPosition = 0;
    _this.fullPageHeight = 0;
    _this.viewportHeight = 0;
    _this.onShow = {};
    _this.onHide = {};
    _this.handleScroll = _this.handleScroll.bind(_this);
    _this.handleResize = _this.handleResize.bind(_this);
    _this.handleKeys = _this.handleKeys.bind(_this);
    return _this;
  }

  createClass(Fullpage, [{
    key: 'componentDidMount',
    value: function () {
      function componentDidMount() {
        this.handleResize();
        this.slides = this.getSlides(this.children);

        this.setState({
          currentSlide: this.slides[0]
        });

        if (typeof window !== 'undefined') {
          window.addEventListener('scroll', this.handleScroll);
          window.addEventListener('resize', this.handleResize);
        }
        if (typeof document !== 'undefined') {
          document.addEventListener('keydown', this.handleKeys);
        }
      }

      return componentDidMount;
    }()
  }, {
    key: 'componentDidUpdate',
    value: function () {
      function componentDidUpdate() {
        // prevProps
        this.handleResize();
        this.slides = this.getSlides(this.children);
      }

      return componentDidUpdate;
    }()
  }, {
    key: 'componentWillUnmount',
    value: function () {
      function componentWillUnmount() {
        // set body height == to 'auto'
        if (typeof window !== 'undefined') {
          window.removeEventListener('scroll', this.handleScroll);
          window.removeEventListener('resize', this.handleResize);
        }
        if (typeof document !== 'undefined') {
          document.removeEventListener('keydown', this.handleKeys);
        }
      }

      return componentWillUnmount;
    }()
  }, {
    key: 'handleKeys',
    value: function () {
      function handleKeys(event) {
        var keyboardShortcut = this.props.keyboardShortcut;

        if (!keyboardShortcut) {
          return true;
        }

        if (event.keyCode === 33 // pageUp:    33,
        || event.keyCode === 37 // left:      37,
        || event.keyCode === 38 // up:        38,
        ) {
            return event.shiftKey ? this.gotoFirst(event) : this.gotoPrevious(event);
          }
        if (event.keyCode === 34 // pageDown:  34,
        || event.keyCode === 39 // right:     39,
        || event.keyCode === 40 // down:      40,
        ) {
            return event.shiftKey ? this.gotoLast(event) : this.gotoNext(event);
          }
        if (event.keyCode === 35 // end:       35,
        ) {
            return this.gotoLast(event);
          }
        if (event.keyCode === 36 // home:      36,
        ) {
            return this.gotoFirst(event);
          }
        return true;
      }

      return handleKeys;
    }()
  }, {
    key: 'handleScroll',
    value: function () {
      function handleScroll() {
        var _this2 = this;

        if (!this.scrollTicking) {
          window.requestAnimationFrame(function () {
            var currentSlide = _this2.state.currentSlide;

            var lastKnownScrollPosition = window.pageYOffset || 0;
            var newSlide = _this2.slides.find(function (slide) {
              return lastKnownScrollPosition < slide.el.offsetTop + slide.el.offsetHeight * 0.5;
            });
            _this2.gotoSlide(newSlide, currentSlide);
            _this2.lastKnownScrollPosition = lastKnownScrollPosition;
            _this2.scrollTicking = false;
          });
        }
        this.scrollTicking = true;
      }

      return handleScroll;
    }()
  }, {
    key: 'handleResize',
    value: function () {
      function handleResize() {
        var _this3 = this;

        if (!this.resizeTicking) {
          window.requestAnimationFrame(function () {
            _this3.viewportHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            _this3.fullPageHeight = _this3.fullpageRef.current.clientHeight;
            _this3.driver.current.style.height = String(_this3.fullPageHeight) + 'px';
            _this3.resizeTicking = false;
          });
        }
        this.resizeTicking = true;
      }

      return handleResize;
    }()
  }, {
    key: 'gotoFirst',
    value: function () {
      function gotoFirst(event) {
        var currentSlide = this.state.currentSlide;

        event.preventDefault();
        this.gotoSlide(this.slides[0], currentSlide, true);
      }

      return gotoFirst;
    }()
  }, {
    key: 'gotoLast',
    value: function () {
      function gotoLast(event) {
        var currentSlide = this.state.currentSlide;

        event.preventDefault();
        this.gotoSlide(this.slides[this.slides.length - 1], currentSlide, true);
      }

      return gotoLast;
    }()

    // @keydown( ['up', 'left'] )

  }, {
    key: 'gotoPrevious',
    value: function () {
      function gotoPrevious(event) {
        var currentSlide = this.state.currentSlide;

        event.preventDefault();
        this.gotoSlide(this.slides[Math.max(0, currentSlide.index - 1)], currentSlide, true);
      }

      return gotoPrevious;
    }()

    // @keydown( ['down', 'right'] )

  }, {
    key: 'gotoNext',
    value: function () {
      function gotoNext(event) {
        var currentSlide = this.state.currentSlide;

        event.preventDefault();
        this.gotoSlide(this.slides[Math.min(this.slides.length - 1, currentSlide.index + 1)], currentSlide, true);
      }

      return gotoNext;
    }()
  }, {
    key: 'gotoSlide',
    value: function () {
      function gotoSlide(newSlide, currentSlide) {
        var scrollTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var _props = this.props,
            transitionTiming = _props.transitionTiming,
            onChange = _props.onChange;

        // TODO: try an other coapraison ... exclude prop

        if (currentSlide.index !== newSlide.index) {
          var translateY = Math.max((this.fullPageHeight - this.viewportHeight) * -1, newSlide.el.offsetTop * -1);

          var previousSlide = currentSlide;
          this.setState({
            previousSlide: previousSlide,
            currentSlide: newSlide,
            translateY: translateY
          });

          // TODO onShow onHide
          if (previousSlide) {
            var _previousSlide$slide$ = previousSlide.slide.props.onHide,
                previousSlideOnHide = _previousSlide$slide$ === undefined ? null : _previousSlide$slide$;

            if (previousSlideOnHide && typeof previousSlideOnHide === 'function') {
              setTimeout(function () {
                return previousSlideOnHide(translateY);
              }, transitionTiming);
            }
          }

          var _newSlide$slide$props = newSlide.slide.props.onShow,
              newSlideOnShow = _newSlide$slide$props === undefined ? null : _newSlide$slide$props;

          if (newSlideOnShow && typeof newSlideOnShow === 'function') {
            newSlideOnShow(translateY);
          }

          if (scrollTo) {
            window.scrollTo(0, newSlide.el.offsetTop);
          }

          onChange(this.state);
        }
      }

      return gotoSlide;
    }()
  }, {
    key: 'render',
    value: function () {
      function render() {
        var _props2 = this.props,
            children = _props2.children,
            navigation = _props2.navigation,
            style = _props2.style,
            warperStyle = _props2.warperStyle,
            className = _props2.className,
            transitionTiming = _props2.transitionTiming;


        this.children = this.getChildren(children);

        var _state = this.state,
            translateY = _state.translateY,
            previousSlide = _state.previousSlide;


        return React.createElement(
          'div',
          null,
          React.createElement('div', { style: { position: 'relative' }, ref: this.driver }),
          React.createElement(
            'div',
            { className: styles.fullpageWarper, style: _extends({}, warperStyle), ref: this.warperRef },
            React.createElement(
              'div',
              {
                className: [styles.fullpage, className].join(', '),
                style: _extends({
                  transition: 'transform ' + String(transitionTiming) + 'ms cubic-bezier(0.645, 0.045, 0.355, 1.000)'
                }, style, {
                  transform: 'translate3D(0, ' + String(translateY) + 'px, 0)'
                }),
                ref: this.fullpageRef
              },
              this.children,
              navigation && React.createElement(FullpageNavigation, { data: children, previousSlide: previousSlide })
            )
          )
        );
      }

      return render;
    }()
  }]);
  return Fullpage;
}(PureComponent), _class$1.propTypes = {
  children: PropTypes.node.isRequired,
  transitionTiming: PropTypes.number,
  warperStyle: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool])),
  style: PropTypes.objectOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.bool])),
  className: PropTypes.string,
  navigation: PropTypes.bool,
  onChange: PropTypes.func,
  keyboardShortcut: PropTypes.bool
}, _class$1.defaultProps = {
  transitionTiming: 700,
  style: {
    position: 'absolute',
    left: 0,
    right: 0
  },
  warperStyle: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0
  },
  className: '',
  navigation: false,
  onChange: null,
  keyboardShortcut: true
}, _initialiseProps = function _initialiseProps() {
  this.getChildren = index(function (children) {
    return React.Children.map(children, function (child) {
      var props = {};
      if (child && child.type === FullpageSection) {
        props.ref = React.createRef();
      }
      return React.cloneElement(child, props);
    });
  });
  this.getSlides = index(function (children) {
    return children.filter(function (child) {
      return child.type && child.type === FullpageSection;
    }).map(function (slide, index$$1) {
      var el = slide.ref.current.ref.current;
      return { slide: slide, el: el, index: index$$1 };
    });
  });
}, _temp$1);

export default Fullpage;
export { Fullpage, FullpageSection };
